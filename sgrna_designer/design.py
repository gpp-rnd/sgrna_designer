# AUTOGENERATED! DO NOT EDIT! File to edit: 02_design.ipynb (unless otherwise specified).

__all__ = ['reverse_compliment', 'calculate_global_position', 'traverse_global_position', 'get_sgrna_global_indices',
           'get_trainscript_region_info', 'get_target_regions_df', 'get_target_regions_sequences',
           'filter_sgrnas_by_region', 'design_sgrna_tiling_library']

# Cell
import pandas as pd
from sgrna_designer import ensembl
from sgrna_designer import tile

# Cell
def reverse_compliment(seq):
    """Return the reverse compliment of a sequence

    seq: str

    return: str
    """
    compliment = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
    reverse = seq[::-1]
    rev_comp = ''.join([compliment[nt] for nt in reverse])
    return rev_comp

# Cell
def calculate_global_position(strand, start, end, relative_position):
    """Calculate the global position of locus in a subsequence

    strand: int [1 or -1], strand of DNA sequence
    start: int, global start position of sequence
    end: int, global end position of sequence
    relative_position: list, positions of sgRNAs relative to sequence
    """
    if strand == 1:
        global_position = [start + x for x in relative_position]
    elif strand == -1:
        global_position = [end - x for x in relative_position]
    else:
        raise ValueError("Strand must be 1 or -1")
    return global_position

# Cell
def traverse_global_position(strand, reference_position, distance):
    """Move from one global position to another"""
    if strand == 1:
        new_position = [x + distance for x in reference_position]
    elif strand == -1:
        new_position = [x - distance for x in reference_position]
    else:
        raise ValueError("Strand must be 1 or -1")
    return new_position

# Cell
def get_sgrna_global_indices(sgrna_df, seq_start, seq_end, strand, sg_positions=None):
    """Take a sgrna_df and return the globabl positions of elements of the sgRNA
    sgrna_df: Dataframe from `build_sgrna_df`
    seq_start: int, starting index of sequence
    seq_end: int, ending index of sequence
    sg_positions: list, positions witih sgRNA to annotate (e.g. [4,8] for nucleotides 4 and 8 of the sgRNA)
    """
    indexed_sgrna_df = sgrna_df.copy()
    indexed_sgrna_df['sgrna_global_start'] = calculate_global_position(strand, seq_start, seq_end,
                                                                       indexed_sgrna_df['sgrna_relative_start'])
    if sg_positions is not None:
        for pos in sg_positions:
            indexed_sgrna_df['sgrna_global_' + str(pos)] = traverse_global_position(strand,
                                                                                    indexed_sgrna_df['sgrna_global_start'],
                                                                                    pos-1)
    indexed_sgrna_df = indexed_sgrna_df.drop('sgrna_relative_start', axis=1)
    return indexed_sgrna_df

# Cell
def get_trainscript_region_info(transcript_info, region_parent, region):
    """Return dictionaries for specified regions of interest

    transcript_info: dict, returned by https://rest.ensembl.org/documentation/info/lookup
    region_parent: str, first level key in transcript_info eg. UTR
    region: str, second level key in trancript_info eg. three_prime_UTR
    """
    if region_parent in transcript_info.keys():
        parent_info = transcript_info[region_parent]
        regions = []
        for r in parent_info:
            if r['object_type'] == region:
                regions.append(r)
    else:
        raise ValueError(region_parent + ' or ' + region + 'element could not be identified')
    return regions

def get_target_regions_df(target_transcripts, region_parent, region,
                          expand_3prime, expand_5prime):
    target_transcript_info = []
    for transcript in target_transcripts:
        transcript_info = ensembl.get_ensembl_id_information(transcript)
        region_info = get_trainscript_region_info(transcript_info, region_parent, region)
        region_info_df = pd.DataFrame(region_info)
        region_info_df['transcript_id'] = transcript
        target_transcript_info.append(region_info_df)
    target_regions_df = pd.concat(target_transcript_info)
    target_regions_df['expanded_start'] = target_regions_df['start'] - expand_3prime
    target_regions_df['expanded_end'] = target_regions_df['end'] + expand_5prime
    # We'll need to keep track of region_pos for merging with the target_sequence_df
    target_regions_df['region_pos'] = target_regions_df.apply(lambda row:
                                                              ensembl.create_region_str(row['expanded_start'],
                                                                                        row['expanded_end'],
                                                                                        row['seq_region_name']),
                                                              axis=1)
    return target_regions_df

# Cell
def get_target_regions_sequences(target_regions_df):
    target_sequences = ensembl.post_region_sequences(target_regions_df['expanded_start'],
                                                     target_regions_df['expanded_end'],
                                                     target_regions_df['seq_region_name'])
    target_sequence_df = pd.DataFrame(target_sequences)
    return target_sequence_df

# Cell
def filter_sgrnas_by_region(transcript_sgrna_df, sg_positions):
    """Filter for sgRNAs such that the sgRNA positions of interest are within the transcript region of interest
    """
    global_pos_cols = []
    for pos in sg_positions:
        global_pos_cols.append('sgrna_global_' + str(pos))
    filtered_sgrna_df = transcript_sgrna_df[
        ((transcript_sgrna_df[global_pos_cols].min(axis=1) >= transcript_sgrna_df['region_start']) &
         (transcript_sgrna_df[global_pos_cols].min(axis=1) <= transcript_sgrna_df['region_end'])) |
        ((transcript_sgrna_df[global_pos_cols].max(axis=1) >= transcript_sgrna_df['region_start']) &
         (transcript_sgrna_df[global_pos_cols].max(axis=1) <= transcript_sgrna_df['region_end']))
    ].copy()
    return filtered_sgrna_df

# Cell
def design_sgrna_tiling_library(target_transcripts, region_parent, region,
                                expand_3prime, expand_5prime, context_len,
                                pam_start, pam_len, sgrna_start, sgrna_len,
                                pams, sg_positions):
    target_regions_df = get_target_regions_df(target_transcripts=target_transcripts, region_parent=region_parent,
                                              region=region, expand_3prime=expand_3prime,
                                              expand_5prime=expand_5prime)
    target_sequences_df = get_target_regions_sequences(target_regions_df)
    target_region_seq_df = merge_target_region_sequence_df(target_regions_df, target_sequences_df)
    transcript_sgrna_df = get_transcript_sgrnas(target_region_seq_df, context_len=context_len, pam_start=pam_start,
                                                pam_len=pam_len, sgrna_start=sgrna_start, sgrna_len=sgrna_len,
                                                pams=pams, sg_positions=sg_positions)
    filtered_sgrnas = filter_sgrnas_by_region(transcript_sgrna_df, sg_positions)
    return filtered_sgrnas